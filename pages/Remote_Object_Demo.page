<apex:page >
  <!-- https://developer.salesforce.com/docs/atlas.en-us.pages.meta/pages/pages_compref_remoteObjects.htm -->
  <!-- Specify which sObjects to access using Visualforce Remote Objects and what JavaScript namespace to access them from -->
  <apex:remoteObjects jsNamespace="Sfdc">
    <!-- https://developer.salesforce.com/docs/atlas.en-us.pages.meta/pages/pages_compref_remoteObjectModel.htm -->
    <!-- Specify a specific sObject and which of it's fields to access using Visualforce Remote Objects-->
    <apex:remoteObjectModel name="Account" fields="Id,Name">
      <apex:remoteObjectField name="NumberofLocations__c" jsShorthand="NumberOfLocations" />
    </apex:remoteObjectModel>
  </apex:remoteObjects>
  
  <script type="text/javascript">
    window.addEventListener("load", function(e) {
      //Instantiate a new Promise using the q framework; we're passing the function that is going retrieve our Account records using Visualforce Remote Objects.
      Q.Promise(function(resolve, reject) {
        //Instantiate an instance of the Account Visualforce Remote Object model we declared earlier.
        var vro = new Sfdc.Account();
        
        //https://developer.salesforce.com/docs/atlas.en-us.pages.meta/pages/pages_remote_objects_using_retrieve_query_object.htm
        //Define any query criteria we'd like tp pass to the retrieve call
        var criteria = {
          orderby: [{Name:'ASC'}],
          limit: 5
        };
        
        //https://developer.salesforce.com/docs/atlas.en-us.pages.meta/pages/pages_remote_objects_callback_functions.htm
        //Define the callback function to the retrieve call that'll run once the call is complete
        var callback = function(error, results, event) {
          //Check for any error from the retrieve call
          if (error) {
            //Pass the error from the retrieve call to the Promise's reject handler; this will trigger the handler attached using the .catch function.
            reject(error.message);
            
          } else {
            //Pass the results from the retrieve call to the Promise's resolved handler; this will trigger the handler(s) attached using the .then function.
            resolve(results);
            
          }
          
        }
        
        //Retrieve the records from Salesforce      
        vro.retrieve(criteria, callback);
        
      }).catch(function(reason) {
        //Error handling for the Promise. We're using HandlebarsJS to generate and render the markup for the errors.
        var source = document.getElementById('errors-template').innerHTML;
        var template = Handlebars.compile(source);
        var context = {'error': reason};
        var html = template(context);
        document.getElementById('errors').innerHTML = html;
          
      }).then(function(records) {
        //First success handler. Here were normalizing the Visualforce Remote Objects into plain old JavaScript objects.
        
        var accounts = [];
        
        if (Array.isArray(records)) {
          records.forEach(function(record) {
            accounts.push({
              'id': record.get('Id'),
              'name': record.get('Name'),
              'numberOfLocations': record.get('NumberOfLocations')
            })
          });
          
        }
        
        return accounts;
        
      }).then(function(accounts) {
        //Second success handler. Using the plain old JavaScript objects from the previous success handler, we're using HandlebarsJS to generate and render the markup for them.
          var source = document.getElementById('accounts-table-template').innerHTML;
          var template = Handlebars.compile(source);
          var context = {'accounts': accounts};
          var html = template(context);
          document.getElementById('accounts').innerHTML = html;
      });
      
    });
    
  </script>
  
  <h1>Accounts</h1>
  
  <!-- A DIV to render error messages to -->
  <div id="error">
    
  </div>
  
  <!-- A DIV to hold the Accounts we retrieve from Visualforce Remote Objects -->
  <div id="accounts">
    Loading ...
  </div>
  
  <!-- HandlebarsJS template to render error messages -->
  <script id="errors-template" type="text/x-handlebars-template">
    {{#if error}}
      <p><b>Error:</b> {{error}}</p>
    {{/if}}
  </script>
  
  <!-- HandlebarsJS template to render Account records -->
  <script id="accounts-table-template" type="text/x-handlebars-template">
    <table>
      <thead>
        <tr>
          <th>Account Name</th>
          <th>Number of Locations</th>
        </tr>
      </thead>
      <tbody>
        {{#each accounts}}
        <tr>
          <td>{{this.name}}</td>
          <td>{{this.numberOfLocations}}</td>
        </tr>
        {{else}}
          <tr>
            <td colspan="2">No Accounts</td>
          </tr>
        {{/each}}
      </tbody>
    </table>
  </script>
  
  <!-- q, A promise library for JavaScript -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/q.js/1.4.1/q.min.js" type="text/javascript"></script>
  
  <!-- HandlebarsJS, client-side templating -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.5/handlebars.min.js" type="text/javascript"></script>
</apex:page>